AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS Step Functions sample project for interacting with an API connected to a service on AWS Fargate,
  hosted in a private subnet, but accessible via a private network load balancer.
# based on the cloudformation template provided by Ignacio Riesgo and Mani Chandrasekaran:
# https://aws.amazon.com/blogs/compute/access-private-applications-on-aws-fargate-using-amazon-api-gateway-privatelink/
# https://github.com/cmanikandan/fargate-apigateway/blob/master/fargate-private-subnet-network-loadbalancer.yml
# based on the original cloudformation template created by Erin Mcgill and Nathan Peck.

Conditions:
  IsChinaRegion:
    Fn::Equals:
      - !Ref AWS::Partition
      - 'aws-cn'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Container configuration"
        Parameters:
          - ServicePrefix
          - RepositoryURI
          - SourceAccessCIDR
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - DesiredCount

Parameters:
  PrivateSubnet1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for the private subnet located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for the private subnet located in Availability Zone 2
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet located in Availability Zone 2
    Type: String
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  ServicePrefix:
    Type: String
    Default: Fargate-service
    Description: A name for the Fargate service
  RepositoryURI:
    Type: String
    Default: amazon/amazon-ecs-sample
    Description: The repository URI of the docker image that contains the application process that will handle the traffic for this service, ex. nginx
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  SourceAccessCIDR:
    Type: String
    Description: The CIDR IP range that is permitted to access the running tasks. We recommend that you set this value to a trusted IP range.
    Default: 0.0.0.0/0

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref RepositoryURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          HealthCheck:
            Command:
              - true
            Interval: 5
            Retries: 10
            StartPeriod: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['/', [ecs, !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSCluster:
    Type: AWS::ECS::Cluster
  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # Fargate Security Groups
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - IpProtocol: TCP
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
      VpcId: !Ref VPC
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [ecs, !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]]]
      RetentionInDays: 14

  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the public facing load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: TCP
          FromPort: 443
          ToPort: 443
      VpcId: !Ref VPC
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetType: ip
      # Hardcode name here because the full name can only be 32 characters
      Name: "SFN-SampleProject-APIG-ECS-TG"
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internal"
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Private subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Private subnet 2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public subnet 1
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public subnet 2
      MapPublicIpOnLaunch: true
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 1
        - Key: Network
          Value: Private
  PrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable
  PrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private subnet 2
        - Key: Network
          Value: Private
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnet1Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  NATGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NAT1EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet1
  NATGateway2:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NAT2EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet2
  NAT1EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VPCFlowLog:
    DependsOn: NAT2EIP
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/flowlogsRole"
      LogGroupName: !Sub "${AWS::StackName}-vpc-flowlogs"
      ResourceId: !Ref VPC
      ResourceType: "VPC"
      TrafficType: "ALL"

  # HTTP API
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "Stepfunctions-apigw-ecs-integration"
      Description: An HTTP API that integrates with a service hosted in ECS
      ProtocolType: HTTP
  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      SecurityGroupIds:
        - !Ref AlbSecurityGroup
      Name: "VPCLink HTTP"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Ref LoadBalancerListener
      IntegrationMethod: GET
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VpcLink
      PassthroughBehavior: WHEN_NO_MATCH
      PayloadFormatVersion: '1.0'
  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - ApiIntegration
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegration
      AuthorizationType: AWS_IAM
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - ApiRoute
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: "$default"

  ###
  # Create a Step Functions state machine
  ApiGatewayECSStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [ ApiGatewayECSWorkflowExecutionRole, Arn ]
      DefinitionString:
        !Sub
        - |-
          {
            "Comment": "Calling APIGW HTTP Endpoint",
            "StartAt": "Call API",
            "States": {
              "Call API": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::apigateway:invoke",
                "Parameters": {
                  "ApiEndpoint": "${apiEndpoint}",
                  "Method": "GET",
                  "AuthType": "IAM_ROLE"
                },
                "Next": "Call Successful?"
              },
              "Call Successful?": {
                "Type": "Choice",
                "Choices": [
                {
                  "Variable": "$.StatusCode",
                  "NumericEquals": 200,
                  "Next": "Notify Success"
                }
                ],
                "Default": "Notify Failure"
              },
              "Notify Success": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                "Parameters": {
                  "Message": "Call was successful",
                  "TopicArn": "${snsTopicArn}"
                },
                "End": true
              },
              "Notify Failure": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                "Parameters": {
                  "Message": "Call was not successful",
                  "TopicArn": "${snsTopicArn}"
                },
                "End": true
              }
            }
          }
        - apiEndpoint: !Sub
            - "${apiId}.execute-api.${AWS::Region}.amazonaws.com${domainSuffix}"
            - apiId: !Ref HttpApi
              domainSuffix: !If [ IsChinaRegion, ".cn", "" ]
          snsTopicArn: !Ref SNSTopic

  ###
  # Create an execution role for the Step Functions state machine
  ApiGatewayECSWorkflowExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: ApiGatewayECSWorkflowExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SNSTopic
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource:
                  - !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/GET/*"

  ###
  # Create an SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Ref SNSKeyAlias

  SNSKey:
    DeletionPolicy : Retain
    Type: AWS::KMS::Key
    Properties: 
      Enabled: true
      KeyPolicy: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "Allow access through SNS for all principals in the account that are authorized to use SNS",
                "Effect": "Allow",
                "Principal": {
                    "AWS": "*"
                },
                "Action": [
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey*",
                    "kms:CreateGrant",
                    "kms:DescribeKey"
                ],
                "Resource": "*",
                "Condition": {
                    "StringEquals": {
                        "kms:ViaService":  { "Fn::Join": [".",["sns","Ref" : "AWS::Region","amazonaws.com"]]},
                        "kms:CallerAccount": { "Ref" : "AWS::AccountId" }
                    }
                }
            },
            {
                "Sid": "Allow direct access to key metadata to the account",
                "Effect": "Allow",
                "Principal": {
                    "AWS": {"Fn::Join": [":",["arn:aws:iam:","Ref" : "AWS::AccountId","root"]]}
                },
                "Action": [
                    "kms:*"                  
                ],
                "Resource": "*"
            }
        ]
    }

  SNSKeyAlias:
    DependsOn: 
      - SNSKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ["", ['alias/Stack-',!Ref AWS::StackName,'/sns-key']]
      TargetKeyId: 
        Ref: SNSKey

Outputs:
  StateMachineArn:
    Value: !Ref ApiGatewayECSStateMachine
  ExecutionInput:
    Description: Sample input to StartExecution.
    Value:
      >
      {}
  ClusterName:
    Description: The name of the ECS Fargate cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  InternalUrl:
    Description: The URL of the internal load balancer
    Value: !Join ['', ['http://', !GetAtt 'ApplicationLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'InternalUrl' ] ]
  ALBEndpoint:
    Description: The ARN of the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ALBEndpoint"
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]