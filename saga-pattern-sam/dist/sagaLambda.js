"use strict";
const AWS = require('aws-sdk');
const stepFunctions = new AWS.StepFunctions({});
module.exports.handler = (event, context, callback) => {
    let runType = "success"; // failFlightsReservation , failFlightsConfirmation , failCarRentalReservation, failCarRentalConfirmation, failPayment
    let tripID = context.awsRequestId;
    if (null != event.queryStringParameters) {
        if (typeof event.queryStringParameters.runType != 'undefined') {
            runType = event.queryStringParameters.runType;
        }
        if (typeof event.queryStringParameters.tripID != 'undefined') {
            tripID = event.queryStringParameters.tripID;
        }
    }
    let input = {
        "trip_id": tripID,
        "depart_city": "Detroit",
        "depart_time": "2021-07-07T06:00:00.000Z",
        "arrive_city": "Frankfurt",
        "arrive_time": "2021-07-09T08:00:00.000Z",
        "rental": "BMW",
        "rental_from": "2021-07-09T00:00:00.000Z",
        "rental_to": "2021-07-17T00:00:00.000Z",
        "run_type": runType
    };
    const params = {
        stateMachineArn: process.env.statemachine_arn,
        input: JSON.stringify(input)
    };
    stepFunctions.startExecution(params, (err, data) => {
        if (err) {
            console.log(err);
            const response = {
                statusCode: 500,
                body: JSON.stringify({
                    message: 'There was an error processing your reservation'
                })
            };
            callback(null, response);
        }
        else {
            console.log(data);
            const response = {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'Your reservation is being processed'
                })
            };
            callback(null, response);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FnYUxhbWJkYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xhbWJkYXMvc2FnYUxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRS9CLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUMzQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQVMsRUFBRSxPQUFXLEVBQUUsUUFBWSxFQUFFLEVBQUU7SUFFOUQsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsc0hBQXNIO0lBQy9JLElBQUksTUFBTSxHQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFFbkMsSUFBRyxJQUFJLElBQUksS0FBSyxDQUFDLHFCQUFxQixFQUFDO1FBQ25DLElBQUcsT0FBTyxLQUFLLENBQUMscUJBQXFCLENBQUMsT0FBTyxJQUFJLFdBQVcsRUFBRTtZQUMxRCxPQUFPLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztTQUNqRDtRQUVELElBQUcsT0FBTyxLQUFLLENBQUMscUJBQXFCLENBQUMsTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUN6RCxNQUFNLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztTQUMvQztLQUNKO0lBRUQsSUFBSSxLQUFLLEdBQUc7UUFDUixTQUFTLEVBQUUsTUFBTTtRQUNqQixhQUFhLEVBQUUsU0FBUztRQUN4QixhQUFhLEVBQUUsMEJBQTBCO1FBQ3pDLGFBQWEsRUFBRSxXQUFXO1FBQzFCLGFBQWEsRUFBRSwwQkFBMEI7UUFDekMsUUFBUSxFQUFFLEtBQUs7UUFDZixhQUFhLEVBQUUsMEJBQTBCO1FBQ3pDLFdBQVcsRUFBRSwwQkFBMEI7UUFDdkMsVUFBVSxFQUFFLE9BQU87S0FDdEIsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHO1FBQ1gsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCO1FBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUMvQixDQUFDO0lBRUYsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFPLEVBQUUsSUFBUSxFQUFFLEVBQUU7UUFDdkQsSUFBSSxHQUFHLEVBQUU7WUFFTCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sUUFBUSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNyQixPQUFPLEVBQUUsZ0RBQWdEO2lCQUN4RCxDQUFDO2FBQ0wsQ0FBQztZQUNGLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEIsTUFBTSxRQUFRLEdBQUc7Z0JBQ2IsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ2pCLE9BQU8sRUFBRSxxQ0FBcUM7aUJBQ2pELENBQUM7YUFDTCxDQUFDO1lBQ0YsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM1QjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuXG5jb25zdCBzdGVwRnVuY3Rpb25zID0gbmV3IEFXUy5TdGVwRnVuY3Rpb25zKHtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cy5oYW5kbGVyID0gKGV2ZW50OmFueSwgY29udGV4dDphbnksIGNhbGxiYWNrOmFueSkgPT4ge1xuXG4gICAgbGV0IHJ1blR5cGUgPSBcInN1Y2Nlc3NcIjsgLy8gZmFpbEZsaWdodHNSZXNlcnZhdGlvbiAsIGZhaWxGbGlnaHRzQ29uZmlybWF0aW9uICwgZmFpbENhclJlbnRhbFJlc2VydmF0aW9uLCBmYWlsQ2FyUmVudGFsQ29uZmlybWF0aW9uLCBmYWlsUGF5bWVudFxuICAgIGxldCB0cmlwSUQgPSAgY29udGV4dC5hd3NSZXF1ZXN0SWQ7XG5cbiAgICBpZihudWxsICE9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycyl7XG4gICAgICAgIGlmKHR5cGVvZiBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMucnVuVHlwZSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcnVuVHlwZSA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy5ydW5UeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodHlwZW9mIGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy50cmlwSUQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRyaXBJRCA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy50cmlwSUQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaW5wdXQgPSB7XG4gICAgICAgIFwidHJpcF9pZFwiOiB0cmlwSUQsXG4gICAgICAgIFwiZGVwYXJ0X2NpdHlcIjogXCJEZXRyb2l0XCIsXG4gICAgICAgIFwiZGVwYXJ0X3RpbWVcIjogXCIyMDIxLTA3LTA3VDA2OjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJhcnJpdmVfY2l0eVwiOiBcIkZyYW5rZnVydFwiLFxuICAgICAgICBcImFycml2ZV90aW1lXCI6IFwiMjAyMS0wNy0wOVQwODowMDowMC4wMDBaXCIsXG4gICAgICAgIFwicmVudGFsXCI6IFwiQk1XXCIsXG4gICAgICAgIFwicmVudGFsX2Zyb21cIjogXCIyMDIxLTA3LTA5VDAwOjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJyZW50YWxfdG9cIjogXCIyMDIxLTA3LTE3VDAwOjAwOjAwLjAwMFpcIixcbiAgICAgICAgXCJydW5fdHlwZVwiOiBydW5UeXBlXG4gICAgfTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgc3RhdGVNYWNoaW5lQXJuOiBwcm9jZXNzLmVudi5zdGF0ZW1hY2hpbmVfYXJuLFxuICAgICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkoaW5wdXQpXG4gICAgfTtcblxuICAgIHN0ZXBGdW5jdGlvbnMuc3RhcnRFeGVjdXRpb24ocGFyYW1zLCAoZXJyOmFueSwgZGF0YTphbnkpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgeW91ciByZXNlcnZhdGlvbidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnWW91ciByZXNlcnZhdGlvbiBpcyBiZWluZyBwcm9jZXNzZWQnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07Il19