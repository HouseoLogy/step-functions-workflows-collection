{
  "Comment": "A state machine that demonstrates how to achieve quorum pattern with a paralel workflow",
  "StartAt": "Log execution in DynamoDB",
  "States": {
    "Log execution in DynamoDB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${DDBTable}",
        "Item": {
          "id.$": "$$.Execution.Id",
          "timeout_occurred": {
            "BOOL": "false"
          },
          "successful_processes": {
            "L": []
          },
          "failed_processes": {
            "L": []
          }
        }
      },
      "Next": "Wait for at least \"quorum\" number processes complete"
    },
    "Wait for at least \"quorum\" number processes complete": {
      "Type": "Parallel",
      "Parameters": {
        "uuid.$": "States.UUID()"
      },
      "Branches": [
        {
          "StartAt": "Mock Process 1",
          "States": {
            "Mock Process 1": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-east-1:625787456381:function:${LambdaFunctionName}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Update Process1 Success",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Update Process1 Failure",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Update Process1 Failure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET failed_processes = list_append(failed_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process1"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses1"
            },
            "Update Process1 Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET successful_processes = list_append(successful_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process1"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses1"
            },
            "Get Process Completion Statuses1": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "ConsistentRead": true
              },
              "Next": "Count Processes 1"
            },
            "Count Processes 1": {
              "Type": "Pass",
              "Next": "Check If Quorum Met 1",
              "Parameters": {
                "completed_processes_count.$": "States.ArrayLength($.Item.successful_processes.L)"
              }
            },
            "Check If Quorum Met 1": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.completed_processes_count",
                  "NumericGreaterThanEqualsPath": "$$.Execution.Input.quorum",
                  "Next": "Quorum Met (DummyFailure) - 1"
                }
              ],
              "Default": "Wait For Other Processes to Complete or For Time out 1"
            },
            "Wait For Other Processes to Complete or For Time out 1": {
              "Type": "Pass",
              "End": true
            },
            "Quorum Met (DummyFailure) - 1": {
              "Type": "Fail",
              "Error": "States.QuorumMet",
              "Comment": "This is actually a success criterion."
            }
          }
        },
        {
          "StartAt": "Mock Process 2",
          "States": {
            "Mock Process 2": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-east-1:625787456381:function:${LambdaFunctionName}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Update Process2 Success",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Update Process2 Failure",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Update Process2 Failure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET failed_processes = list_append(failed_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process2"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses2"
            },
            "Update Process2 Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET successful_processes = list_append(successful_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process2"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses2"
            },
            "Get Process Completion Statuses2": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "ConsistentRead": true
              },
              "Next": "Count Processes 2"
            },
            "Count Processes 2": {
              "Type": "Pass",
              "Next": "Check If Quorum Met 2",
              "Parameters": {
                "completed_processes_count.$": "States.ArrayLength($.Item.successful_processes.L)"
              }
            },
            "Check If Quorum Met 2": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.completed_processes_count",
                  "NumericGreaterThanEqualsPath": "$$.Execution.Input.quorum",
                  "Next": "Quorum Met (DummyFailure) - 2"
                }
              ],
              "Default": "Wait For Other Processes to Complete or For Time out 2"
            },
            "Wait For Other Processes to Complete or For Time out 2": {
              "Type": "Pass",
              "End": true
            },
            "Quorum Met (DummyFailure) - 2": {
              "Type": "Fail",
              "Error": "States.QuorumMet",
              "Comment": "This is actually a success criterion."
            }
          }
        },
        {
          "StartAt": "Mock Process 3",
          "States": {
            "Mock Process 3": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-east-1:625787456381:function:${LambdaFunctionName}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Update Process3 Success",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Update Process3 Failure",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Update Process3 Failure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET failed_processes = list_append(failed_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process3"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses3"
            },
            "Update Process3 Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET successful_processes = list_append(successful_processes, :proc)",
                "ExpressionAttributeValues": {
                  ":proc": {
                    "L": [
                      "Process3"
                    ]
                  }
                }
              },
              "Next": "Get Process Completion Statuses3"
            },
            "Get Process Completion Statuses3": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "ConsistentRead": true
              },
              "Next": "Count Processes 3"
            },
            "Count Processes 3": {
              "Type": "Pass",
              "Next": "Check If Quorum Met 3",
              "Parameters": {
                "completed_processes_count.$": "States.ArrayLength($.Item.successful_processes.L)"
              }
            },
            "Check If Quorum Met 3": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.completed_processes_count",
                  "NumericGreaterThanEqualsPath": "$$.Execution.Input.quorum",
                  "Next": "Quorum Met (DummyFailure) - 3"
                }
              ],
              "Default": "Wait For Other Processes to Complete or For Time out 3"
            },
            "Wait For Other Processes to Complete or For Time out 3": {
              "Type": "Pass",
              "End": true
            },
            "Quorum Met (DummyFailure) - 3": {
              "Type": "Fail",
              "Error": "States.QuorumMet",
              "Comment": "This is actually a success criterion."
            }
          }
        },
        {
          "StartAt": "TimeoutWait",
          "States": {
            "TimeoutWait": {
              "Type": "Wait",
              "Seconds": 5,
              "Next": "Update Process Ran out of time"
            },
            "Update Process Ran out of time": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                  "id": {
                    "S.$": "$$.Execution.Id"
                  }
                },
                "UpdateExpression": "SET timeout_occurred = :var",
                "ExpressionAttributeValues": {
                  ":var": {
                    "BOOL": true
                  }
                }
              },
              "Next": "Ran out of Time"
            },
            "Ran out of Time": {
              "Type": "Fail",
              "Error": "States.RanOutOfTime"
            }
          }
        }
      ],
      "Next": "Next Step When Quorum is met",
      "Catch": [
        {
          "ErrorEquals": [
            "States.QuorumMet"
          ],
          "Next": "Next Step When Quorum is met",
          "Comment": "Quorum Met"
        },
        {
          "ErrorEquals": [
            "States.RanOutOfTime"
          ],
          "Comment": "Ran out of Time",
          "Next": "Next Step if Process Ran out of time"
        }
      ]
    },
    "Next Step When Quorum is met": {
      "Type": "Pass",
      "Next": "Update \"Ran Out of time\" to False (if needed)"
    },
    "Update \"Ran Out of time\" to False (if needed)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${DDBTable}",
        "Key": {
          "id": {
            "S.$": "$$.Execution.Id"
          }
        },
        "UpdateExpression": "SET timeout_occurred = :false_value",
        "ConditionExpression": "(timeout_occurred = :true_value) and (size(successful_processes) >= :quorum_value)",
        "ExpressionAttributeValues": {
          ":false_value": {
            "BOOL": false
          },
          ":true_value": {
            "BOOL": true
          },
          ":quorum_value": {
            "N.$": "States.Format('{}',$$.Execution.Input.quorum)"
          }
        }
      },
      "Next": "Get Process Completion Status",
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.ConditionalCheckFailedException"
          ],
          "Next": "Get Process Completion Status",
          "Comment": "This is the usual scenario. There are race conditions when the timeout could be set to true, but processes might have completed. Hence this update is in place."
        }
      ],
      "Comment": "There are race conditions when processes finish just at the time of timeout. To ensure the DynamoDB item does not hold contradictory information that Quorum has been met, but that time out has occurred, we are setting the timeout to False, when quorum is met. This step updates the timeout field to false, if it is set to true and number of processes successfully completed meets quorum"
    },
    "Get Process Completion Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${DDBTable}",
        "Key": {
          "id": {
            "S.$": "$$.Execution.Id"
          }
        },
        "ConsistentRead": true
      },
      "End": true
    },
    "Next Step if Process Ran out of time": {
      "Type": "Pass",
      "Next": "Update \"Ran Out of time\" to False (if needed)"
    }
  }
}
